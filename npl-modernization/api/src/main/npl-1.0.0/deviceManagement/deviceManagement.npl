package deviceManagement

/**
 * Represents a device in the system.
 */
struct Device {
    id: Text,
    name: Text,
    type: Text,
    tenantId: Text,
    customerId: Optional<Text>,
    credentials: Text,
    label: Optional<Text>,
    deviceProfileId: Optional<Text>,
    firmwareId: Optional<Text>,
    softwareId: Optional<Text>,
    externalId: Optional<Text>,
    version: Optional<Number>,
    additionalInfo: Optional<Text>,
    createdTime: Optional<Number>,
    deviceData: Optional<Text>
};

/**
 * Device credentials information
 */
struct DeviceCredentials {
    deviceId: Text,
    credentialsType: Text,
    credentialsId: Text,
    credentialsValue: Text
};

/**
 * Bulk import result
 */
struct BulkImportResult {
    totalProcessed: Number,
    successCount: Number,
    failedCount: Number,
    errors: List<Text>
};

/**
 * Device creation request with credentials
 */
struct SaveDeviceWithCredentialsRequest {
    device: Device,
    credentials: DeviceCredentials
};

/**
 * Device limits configuration
 */
struct DeviceLimits {
    maxDevicesPerTenant: Number,
    maxDevicesPerCustomer: Number,
    maxDevicesPerProfile: Number
};

/**
 * Notifications
 */
notification deviceSaved(device: Device) returns Unit;
notification deviceDeleted(deviceId: Text) returns Unit;
notification deviceCredentialsUpdated(deviceId: Text, credentials: Text) returns Unit;
notification deviceCredentialsDeleted(deviceId: Text) returns Unit;
notification deviceAssigned(deviceId: Text, customerId: Text) returns Unit;
notification deviceUnassigned(deviceId: Text) returns Unit;
notification deviceClaimed(deviceId: Text, claimedBy: Text) returns Unit;
notification deviceReclaimed(deviceId: Text, reclaimedBy: Text) returns Unit;
notification deviceAssignedToEdge(deviceId: Text, edgeId: Text) returns Unit;
notification deviceUnassignedFromEdge(deviceId: Text, edgeId: Text) returns Unit;
notification devicesBulkImported(importedCount: Number, failedCount: Number) returns Unit;
notification devicesBulkDeleted(deletedCount: Number, failedCount: Number) returns Unit;
notification deviceLimitsUpdated(maxTenant: Number, maxCustomer: Number) returns Unit;

// ========== DEVICE-SPECIFIC COMPOSED PROTOCOLS ==========

/**
 * Device Credentials Management Protocol
 * Handles authentication and access credentials for a specific device
 */
@api
protocol[sys_admin, tenant_admin] DeviceCredentialsManager(var deviceId: Text) {
    
    initial state active;
    final state deleted;
    
    private var credentialsType: Text = "ACCESS_TOKEN";
    private var credentialsId: Text = "";
    private var credentialsValue: Text = "";
    
    init {
        // Generate default credentials
        credentialsId = "device_" + deviceId;
        credentialsValue = "token_" + deviceId + "_" + now().toText();
    };
    
    /**
     * Update device credentials
     */
    @api
    permission[sys_admin | tenant_admin] updateCredentials(newType: Text, newId: Text, newValue: Text) | active {
        require(newType.length() > 0, "Credentials type cannot be empty");
        require(newValue.length() > 0, "Credentials value cannot be empty");
        
        credentialsType = newType;
        credentialsId = newId;
        credentialsValue = newValue;
        
        notify deviceCredentialsUpdated(deviceId, credentialsId);
    };
    
    /**
     * Get current credentials
     */
    @api
    permission[sys_admin | tenant_admin] getCredentials() returns DeviceCredentials | active {
        return DeviceCredentials(
            deviceId = deviceId,
            credentialsType = credentialsType,
            credentialsId = credentialsId,
            credentialsValue = credentialsValue
        );
    };
    
    /**
     * Delete credentials
     */
    @api
    permission[sys_admin | tenant_admin] deleteCredentials() | active {
        credentialsType = "";
        credentialsId = "";
        credentialsValue = "";
        
        notify deviceCredentialsDeleted(deviceId);
        become deleted;
    };
    
    /**
     * Get credentials value for device record
     */
    @api
    permission[sys_admin | tenant_admin] getCredentialsValue() returns Text | active {
        return credentialsValue;
    };
};

/**
 * Customer Assignment Protocol
 * Manages the relationship between a device and customers
 */
@api
protocol[sys_admin, tenant_admin] CustomerAssignment(var deviceId: Text) {
    
    initial state unassigned;
    state assigned;
    state claimed;
    
    private var customerId: Optional<Text> = optionalOf<Text>();
    private var claimedBy: Optional<Text> = optionalOf<Text>();
    
    /**
     * Assign device to customer
     */
    @api
    permission[sys_admin | tenant_admin] assignToCustomer(newCustomerId: Text) | unassigned {
        require(newCustomerId.length() > 0, "Customer ID cannot be empty");
        
        customerId = optionalOf(newCustomerId);
        notify deviceAssigned(deviceId, newCustomerId);
        become assigned;
    };
    
    /**
     * Unassign device from customer
     */
    @api
    permission[sys_admin | tenant_admin] unassignFromCustomer() | assigned {
        var oldCustomerId = customerId.getOrFail();
        customerId = optionalOf<Text>();
        notify deviceUnassigned(deviceId);
        become unassigned;
    };
    
    /**
     * Claim device (customer takes ownership)
     */
    @api
    permission[sys_admin | tenant_admin] claimDevice(claimerId: Text) | assigned {
        require(claimerId.length() > 0, "Claimer ID cannot be empty");
        
        claimedBy = optionalOf(claimerId);
        notify deviceClaimed(deviceId, claimerId);
        become claimed;
    };
    
    /**
     * Reclaim device (remove customer ownership)
     */
    @api
    permission[sys_admin | tenant_admin] reclaimDevice(reclaimerId: Text) | claimed {
        require(reclaimerId.length() > 0, "Reclaimer ID cannot be empty");
        
        claimedBy = optionalOf<Text>();
        notify deviceReclaimed(deviceId, reclaimerId);
        become assigned;
    };
    
    /**
     * Get current customer assignment
     */
    @api
    permission[sys_admin | tenant_admin] getCurrentCustomer() returns Optional<Text> {
        return customerId;
    };
    
    /**
     * Get current customer for device record
     */
    @api
    permission[sys_admin | tenant_admin] getCustomerIdForDevice() returns Optional<Text> {
        return customerId;
    };
};

/**
 * Edge Assignment Protocol  
 * Manages device assignments to edge instances
 */
@api
protocol[sys_admin, tenant_admin] EdgeAssignment(var deviceId: Text) {
    
    initial state unassigned;
    state assigned;
    
    private var edgeId: Optional<Text> = optionalOf<Text>();
    
    /**
     * Assign device to edge
     */
    @api
    permission[sys_admin | tenant_admin] assignToEdge(newEdgeId: Text) | unassigned {
        require(newEdgeId.length() > 0, "Edge ID cannot be empty");
        
        edgeId = optionalOf(newEdgeId);
        notify deviceAssignedToEdge(deviceId, newEdgeId);
        become assigned;
    };
    
    /**
     * Unassign device from edge
     */
    @api
    permission[sys_admin | tenant_admin] unassignFromEdge() | assigned {
        var oldEdgeId = edgeId.getOrFail();
        edgeId = optionalOf<Text>();
        notify deviceUnassignedFromEdge(deviceId, oldEdgeId);
        become unassigned;
    };
    
    /**
     * Get current edge assignment
     */
    @api
    permission[sys_admin | tenant_admin] getCurrentEdge() returns Optional<Text> {
        return edgeId;
    };
};

// ========== MAIN DEVICE MANAGEMENT PROTOCOL ==========

/**
 * Main Device Management Protocol
 * Orchestrates device lifecycle using composed protocols
 */
@api
protocol[sys_admin, tenant_admin, customer_user] DeviceManagement() {

    initial state active;
    
    // Core device storage
    private var devices = mapOf<Text, Device>();
    
    // Composed protocol instances for each device
    private var deviceCredentials = mapOf<Text, DeviceCredentialsManager>();
    private var customerAssignments = mapOf<Text, CustomerAssignment>();
    private var edgeAssignments = mapOf<Text, EdgeAssignment>();

    // Device validation constants
    private var reservedNames = setOf("admin", "system", "root", "test", "default", "null", "undefined");
    private var maxDevicesPerTenant = 10000;
    private var maxDevicesPerCustomer = 1000;
    
    /**
     * Check if device name is reserved
     */
    function isReservedName(name: Text) returns Boolean -> {
        return reservedNames.contains(name);
    };
    
    /**
     * Get device count for tenant
     */
    function getDeviceCountForTenant(tenantId: Text) returns Number -> {
        return devices.values().filter(function(d: Device) -> d.tenantId == tenantId).size();
    };
    
    /**
     * Get device count for customer
     */
    function getDeviceCountForCustomer(customerId: Text) returns Number -> {
        return devices.values().filter(function(d: Device) -> d.customerId.isPresent() && d.customerId.getOrFail() == customerId).size();
    };

    /**
     * Simple device validation using helper functions
     */
    function validateDevice(device: Device) returns Boolean -> {
        if (device.name.length() == 0) {
            return false;
        };
        if (device.type.length() == 0) {
            return false;
        };
        if (device.tenantId.length() == 0) {
            return false;
        };
        if (device.name.length() > 255) {
            return false;
        };
        return true;
    };

    /**
     * Create or update a device with enhanced validation
     */
    @api
    permission[sys_admin | tenant_admin] saveDevice(device: Device) returns Device | active {
        // Comprehensive validation using require statements
        require(device.name.length() >= 3, "Device name must be at least 3 characters long");
        require(device.name.length() <= 255, "Device name cannot exceed 255 characters");
        require(device.type.length() > 0, "Device type cannot be empty");
        require(device.tenantId.length() > 0, "Tenant ID cannot be empty");
        require(!isReservedName(device.name), "Device name is reserved and cannot be used");
        
        // Check tenant device limits
        var currentTenantDevices = getDeviceCountForTenant(device.tenantId);
        require(currentTenantDevices < maxDevicesPerTenant, "Tenant device limit exceeded");
        
        // Check customer device limits if customer is assigned
        if (device.customerId.isPresent()) {
            var currentCustomerDevices = getDeviceCountForCustomer(device.customerId.getOrFail());
            require(currentCustomerDevices < maxDevicesPerCustomer, "Customer device limit exceeded");
        };
        
        var isNewDevice = !devices.getOrNone(device.id).isPresent();
        
        // Create composed protocols for new devices
        if (isNewDevice) {
            var credentials = DeviceCredentialsManager[sys_admin, tenant_admin](device.id);
            var customerAssignment = CustomerAssignment[sys_admin, tenant_admin](device.id);
            var edgeAssignment = EdgeAssignment[sys_admin, tenant_admin](device.id);
            
            deviceCredentials = deviceCredentials.with(device.id, credentials);
            customerAssignments = customerAssignments.with(device.id, customerAssignment);
            edgeAssignments = edgeAssignments.with(device.id, edgeAssignment);
        };
        
        // Get credentials value from composed protocol
        var credentialsValue = "";
        var credentialsProtocol = deviceCredentials.getOrNone(device.id);
        if (credentialsProtocol.isPresent()) {
            credentialsValue = credentialsProtocol.getOrFail().getCredentialsValue[sys_admin]();
        };
        
        // Get customer assignment from composed protocol
        var customerIdForDevice = optionalOf<Text>();
        var customerProtocol = customerAssignments.getOrNone(device.id);
        if (customerProtocol.isPresent()) {
            customerIdForDevice = customerProtocol.getOrFail().getCustomerIdForDevice[sys_admin]();
        };
        
        var deviceToSave = Device(
            id = device.id,
            name = device.name,
            type = device.type,
            tenantId = device.tenantId,
            customerId = customerIdForDevice,
            credentials = credentialsValue,
            label = device.label,
            deviceProfileId = device.deviceProfileId,
            firmwareId = device.firmwareId,
            softwareId = device.softwareId,
            externalId = device.externalId,
            version = device.version,
            additionalInfo = device.additionalInfo,
            createdTime = optionalOf(1234567890),
            deviceData = device.deviceData
        );
        
        devices = devices.with(deviceToSave.id, deviceToSave);
        
        notify deviceSaved(deviceToSave);
        return deviceToSave;
    };

    /**
     * Get device by ID
     */
    @api
    permission[sys_admin | tenant_admin | customer_user] getDeviceById(id: Text) returns Optional<Device> | active {
        return devices.getOrNone(id);
    };

    /**
     * Delete device with composed protocol cleanup
     */
    @api
    permission[sys_admin | tenant_admin] deleteDevice(id: Text) | active {
        var device = devices.getOrNone(id);
        require(device.isPresent(), "Device not found");
        
        // Clean up composed protocols
        var credentialsProtocol = deviceCredentials.getOrNone(id);
        if (credentialsProtocol.isPresent()) {
            credentialsProtocol.getOrFail().deleteCredentials[sys_admin]();
        };
        
        // Remove protocol instances
        deviceCredentials = deviceCredentials.without(id);
        customerAssignments = customerAssignments.without(id);
        edgeAssignments = edgeAssignments.without(id);
        devices = devices.without(id);
        
        notify deviceDeleted(id);
    };

    /**
     * Assign device to customer using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] assignDeviceToCustomer(deviceId: Text, customerId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var customerAssignment = customerAssignments.getOrNone(deviceId).getOrFail();
        customerAssignment.assignToCustomer[sys_admin](customerId);
        
        // Update device record with new customer assignment
        var updatedDevice = Device(
            id = device.getOrFail().id,
            name = device.getOrFail().name,
            type = device.getOrFail().type,
            tenantId = device.getOrFail().tenantId,
            customerId = optionalOf(customerId),
            credentials = device.getOrFail().credentials,
            label = device.getOrFail().label,
            deviceProfileId = device.getOrFail().deviceProfileId,
            firmwareId = device.getOrFail().firmwareId,
            softwareId = device.getOrFail().softwareId,
            externalId = device.getOrFail().externalId,
            version = device.getOrFail().version,
            additionalInfo = device.getOrFail().additionalInfo,
            createdTime = device.getOrFail().createdTime,
            deviceData = device.getOrFail().deviceData
        );
        devices = devices.with(deviceId, updatedDevice);
    };

    /**
     * Unassign device from customer using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] unassignDeviceFromCustomer(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var customerAssignment = customerAssignments.getOrNone(deviceId).getOrFail();
        customerAssignment.unassignFromCustomer[sys_admin]();
        
        // Update device record
        var updatedDevice = Device(
            id = device.getOrFail().id,
            name = device.getOrFail().name,
            type = device.getOrFail().type,
            tenantId = device.getOrFail().tenantId,
            customerId = optionalOf<Text>(),
            credentials = device.getOrFail().credentials,
            label = device.getOrFail().label,
            deviceProfileId = device.getOrFail().deviceProfileId,
            firmwareId = device.getOrFail().firmwareId,
            softwareId = device.getOrFail().softwareId,
            externalId = device.getOrFail().externalId,
            version = device.getOrFail().version,
            additionalInfo = device.getOrFail().additionalInfo,
            createdTime = device.getOrFail().createdTime,
            deviceData = device.getOrFail().deviceData
        );
        devices = devices.with(deviceId, updatedDevice);
    };

    /**
     * Save device credentials using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] saveDeviceCredentials(deviceId: Text, credentials: DeviceCredentials) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var credentialsProtocol = deviceCredentials.getOrNone(deviceId).getOrFail();
        credentialsProtocol.updateCredentials[sys_admin](credentials.credentialsType, credentials.credentialsId, credentials.credentialsValue);
        
        // Update device record with new credentials
        var updatedDevice = Device(
            id = device.getOrFail().id,
            name = device.getOrFail().name,
            type = device.getOrFail().type,
            tenantId = device.getOrFail().tenantId,
            customerId = device.getOrFail().customerId,
            credentials = credentials.credentialsValue,
            label = device.getOrFail().label,
            deviceProfileId = device.getOrFail().deviceProfileId,
            firmwareId = device.getOrFail().firmwareId,
            softwareId = device.getOrFail().softwareId,
            externalId = device.getOrFail().externalId,
            version = device.getOrFail().version,
            additionalInfo = device.getOrFail().additionalInfo,
            createdTime = device.getOrFail().createdTime,
            deviceData = device.getOrFail().deviceData
        );
        devices = devices.with(deviceId, updatedDevice);
    };

    /**
     * Delete device credentials using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] deleteDeviceCredentials(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var credentialsProtocol = deviceCredentials.getOrNone(deviceId).getOrFail();
        credentialsProtocol.deleteCredentials[sys_admin]();
    };

    /**
     * Claim device using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] claimDevice(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var customerAssignment = customerAssignments.getOrNone(deviceId).getOrFail();
        customerAssignment.claimDevice[sys_admin]("current_user");
    };

    /**
     * Reclaim device using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] reclaimDevice(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var customerAssignment = customerAssignments.getOrNone(deviceId).getOrFail();
        customerAssignment.reclaimDevice[sys_admin]("current_user");
    };

    /**
     * Assign device to edge using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] assignDeviceToEdge(deviceId: Text, edgeId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var edgeAssignment = edgeAssignments.getOrNone(deviceId).getOrFail();
        edgeAssignment.assignToEdge[sys_admin](edgeId);
    };

    /**
     * Unassign device from edge using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] unassignDeviceFromEdge(deviceId: Text, edgeId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var edgeAssignment = edgeAssignments.getOrNone(deviceId).getOrFail();
        edgeAssignment.unassignFromEdge[sys_admin]();
    };

    /**
     * Get device credentials using composed protocol
     */
    @api
    permission[sys_admin | tenant_admin] getDeviceCredentials(deviceId: Text) returns Optional<DeviceCredentials> | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var credentialsProtocol = deviceCredentials.getOrNone(deviceId);
        if (credentialsProtocol.isPresent()) {
            return optionalOf(credentialsProtocol.getOrFail().getCredentials[sys_admin]());
        };
        
        return optionalOf<DeviceCredentials>();
    };

    /**
     * Get customer devices using composed protocols
     */
    @api
    permission[sys_admin | tenant_admin | customer_user] getCustomerDevices(customerId: Text) returns List<Device> | active {
        var customerDevices = listOf<Device>();
        var allDevices = devices.values();
        
        for (device in allDevices) {
            var customerAssignment = customerAssignments.getOrNone(device.id);
            if (customerAssignment.isPresent()) {
                var assignedCustomer = customerAssignment.getOrFail().getCurrentCustomer[sys_admin]();
                if (assignedCustomer.isPresent() && assignedCustomer.getOrFail() == customerId) {
                    customerDevices = customerDevices.with(device);
                };
            };
        };
        
        return customerDevices;
    };

    /**
     * Get all devices
     */
    @api
    permission[sys_admin | tenant_admin | customer_user] getAllDevices() returns List<Device> | active {
        return devices.values();
    };

    /**
     * Create device with credentials using protocol composition
     */
    @api
    permission[sys_admin | tenant_admin] saveDeviceWithCredentials(request: SaveDeviceWithCredentialsRequest) returns Device | active {
        require(validateDevice(request.device), "Device validation failed");
        require(request.credentials.credentialsType.length() > 0, "Credentials type cannot be empty");
        
        // Implement device creation directly to avoid recursive call
        var device = request.device;
        var isNewDevice = !devices.getOrNone(device.id).isPresent();
        
        // Create composed protocols for new devices
        if (isNewDevice) {
            var credentials = DeviceCredentialsManager[sys_admin, tenant_admin](device.id);
            var customerAssignment = CustomerAssignment[sys_admin, tenant_admin](device.id);
            var edgeAssignment = EdgeAssignment[sys_admin, tenant_admin](device.id);
            
            deviceCredentials = deviceCredentials.with(device.id, credentials);
            customerAssignments = customerAssignments.with(device.id, customerAssignment);
            edgeAssignments = edgeAssignments.with(device.id, edgeAssignment);
        };
        
        // Get credentials value from composed protocol
        var credentialsValue = request.credentials.credentialsValue;
        var credentialsProtocol = deviceCredentials.getOrNone(device.id);
        if (credentialsProtocol.isPresent()) {
            credentialsProtocol.getOrFail().updateCredentials[sys_admin](request.credentials.credentialsType, request.credentials.credentialsId, request.credentials.credentialsValue);
            credentialsValue = credentialsProtocol.getOrFail().getCredentialsValue[sys_admin]();
        };
        
        var deviceToSave = Device(
            id = device.id,
            name = device.name,
            type = device.type,
            tenantId = device.tenantId,
            customerId = device.customerId,
            credentials = credentialsValue,
            label = device.label,
            deviceProfileId = device.deviceProfileId,
            firmwareId = device.firmwareId,
            softwareId = device.softwareId,
            externalId = device.externalId,
            version = device.version,
            additionalInfo = device.additionalInfo,
            createdTime = optionalOf(1234567890),
            deviceData = device.deviceData
        );
        
        devices = devices.with(deviceToSave.id, deviceToSave);
        
        notify deviceSaved(deviceToSave);
        return deviceToSave;
    };

    // ========== BULK OPERATIONS ==========

    /**
     * Simple bulk device creation
     * UI handles progress tracking and error management
     */
    @api
    permission[sys_admin | tenant_admin] bulkCreateDevices(deviceList: List<Device>) returns BulkImportResult | active {
        var successCount = 0;
        var failedCount = 0;
        var errors = listOf<Text>();
        
        for (device in deviceList) {
            // Basic validation
            if (device.name.length() >= 3 && device.type.length() > 0) {
                this.devices = this.devices.with(device.id, device);
                notify deviceSaved(device);
                successCount = successCount + 1;
            } else {
                failedCount = failedCount + 1;
                errors = errors.with("Invalid device: " + device.name);
            };
        };
        
        notify devicesBulkImported(successCount, failedCount);
        
        return BulkImportResult(
            totalProcessed = deviceList.size(),
            successCount = successCount,
            failedCount = failedCount,
            errors = errors
        );
    };
    
    /**
     * Simple bulk device deletion
     * UI handles progress tracking and error management
     */
    @api
    permission[sys_admin | tenant_admin] processDevicesBulkDelete(deviceIds: List<Text>) returns BulkImportResult | active {
        var successCount = 0;
        var failedCount = 0;
        var errors = listOf<Text>();
        
        for (deviceId in deviceIds) {
            if (this.devices.getOrNone(deviceId).isPresent()) {
                this.devices = this.devices.without(deviceId);
                notify deviceDeleted(deviceId);
                successCount = successCount + 1;
            } else {
                failedCount = failedCount + 1;
                errors = errors.with("Device not found: " + deviceId);
            };
        };
        
        notify devicesBulkDeleted(successCount, failedCount);
        
        return BulkImportResult(
            totalProcessed = deviceIds.size(),
            successCount = successCount,
            failedCount = failedCount,
            errors = errors
        );
    };
    
    /**
     * Update device limits configuration
     */
    @api
    permission[sys_admin] updateDeviceLimits(maxTenant: Number, maxCustomer: Number) | active {
        require(maxTenant > 0, "Max tenant devices must be positive");
        require(maxCustomer > 0, "Max customer devices must be positive");
        require(maxCustomer <= maxTenant, "Customer limit cannot exceed tenant limit");
        
        maxDevicesPerTenant = maxTenant;
        maxDevicesPerCustomer = maxCustomer;
        notify deviceLimitsUpdated(maxTenant, maxCustomer);
    };
    
    /**
     * Get current device limits
     */
    @api
    permission[sys_admin | tenant_admin | customer_user] getDeviceLimits() returns DeviceLimits | active {
        return DeviceLimits(
            maxDevicesPerTenant = maxDevicesPerTenant,
            maxDevicesPerCustomer = maxDevicesPerCustomer,
            maxDevicesPerProfile = 5000
        );
    };

}; 