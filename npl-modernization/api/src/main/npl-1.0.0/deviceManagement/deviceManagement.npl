package deviceManagement

/**
 * Represents a device in the system.
 */
struct Device {
    id: Text,
    name: Text,
    type: Text,
    tenantId: Text,
    customerId: Optional<Text>,
    credentials: Text,
    label: Optional<Text>,
    deviceProfileId: Optional<Text>,
    firmwareId: Optional<Text>,
    softwareId: Optional<Text>,
    externalId: Optional<Text>,
    version: Optional<Number>,
    additionalInfo: Optional<Text>,
    createdTime: Optional<Number>,
    deviceData: Optional<Text>
};

/**
 * Device credentials information
 */
struct DeviceCredentials {
    deviceId: Text,
    credentialsType: Text,
    credentialsId: Text,
    credentialsValue: Text
};

/**
 * Bulk import result
 */
struct BulkImportResult {
    totalProcessed: Number,
    successCount: Number,
    failedCount: Number,
    errors: List<Text>
};

/**
 * Notifications
 */
notification deviceSaved(device: Device) returns Unit;
notification deviceDeleted(deviceId: Text) returns Unit;
notification deviceAssigned(deviceId: Text, customerId: Text) returns Unit;
notification deviceUnassigned(deviceId: Text) returns Unit;
notification deviceCredentialsUpdated(deviceId: Text, credentials: Text) returns Unit;
notification deviceCredentialsDeleted(deviceId: Text) returns Unit;
notification deviceClaimed(deviceId: Text, claimedBy: Text) returns Unit;
notification deviceReclaimed(deviceId: Text, reclaimedBy: Text) returns Unit;
notification devicesBulkImported(importedCount: Number, failedCount: Number) returns Unit;
notification devicesBulkDeleted(deletedCount: Number, failedCount: Number) returns Unit;
notification deviceAssignedToEdge(deviceId: Text, edgeId: Text) returns Unit;
notification deviceUnassignedFromEdge(deviceId: Text, edgeId: Text) returns Unit;

/**
 * Device management protocol
 */
@api
protocol[sys_admin, tenant_admin, customer_user] DeviceManagement() {

    initial state active;
    
    // Protocol state: stored devices by ID
    private var devices = mapOf<Text, Device>();
    
    // Device credentials by device ID
    private var deviceCredentials = mapOf<Text, DeviceCredentials>();
    
    // Customer assignments: deviceId -> customerId
    private var customerAssignments = mapOf<Text, Text>();

    /**
     * Validate device data
     */
    function validateDevice(device: Device) returns Boolean -> {
        if (device.name.length() == 0) {
            return false;
        };
        if (device.type.length() == 0) {
            return false;
        };
        if (device.tenantId.length() == 0) {
            return false;
        };
        if (device.name.length() > 255) {
            return false;
        };
        return true;
    };

    /**
     * Create or update a device
     */
    @api
    permission[sys_admin | tenant_admin] saveDevice(device: Device) returns Device | active {
        // Validate input
        require(validateDevice(device), "Invalid device data");
        
        // Check if device already exists
        var existingDevice = devices.getOrNone(device.id);
        var isUpdate = existingDevice.isPresent();
        
        // Set creation time for new devices
        var savedDevice = device;
        if (!isUpdate && !device.createdTime.isPresent()) {
            savedDevice = Device(
                id = device.id,
                name = device.name,
                type = device.type,
                tenantId = device.tenantId,
                customerId = device.customerId,
                credentials = device.credentials,
                label = device.label,
                deviceProfileId = device.deviceProfileId,
                firmwareId = device.firmwareId,
                softwareId = device.softwareId,
                externalId = device.externalId,
                version = device.version,
                additionalInfo = device.additionalInfo,
                createdTime = optionalOf(1234567890),
                deviceData = device.deviceData
            );
        };
        
        // Generate credentials if needed
        if (!isUpdate && savedDevice.credentials.length() == 0) {
            var currentTime = now();
            var token = "device_" + device.id + "_" + currentTime.toText();
            savedDevice = Device(
                id = savedDevice.id,
                name = savedDevice.name,
                type = savedDevice.type,
                tenantId = savedDevice.tenantId,
                customerId = savedDevice.customerId,
                credentials = token,
                label = savedDevice.label,
                deviceProfileId = savedDevice.deviceProfileId,
                firmwareId = savedDevice.firmwareId,
                softwareId = savedDevice.softwareId,
                externalId = savedDevice.externalId,
                version = savedDevice.version,
                additionalInfo = savedDevice.additionalInfo,
                createdTime = savedDevice.createdTime,
                deviceData = savedDevice.deviceData
            );
        };
        
        // Store the device
        devices = devices.with(device.id, savedDevice);
        
        // Emit notification
        notify deviceSaved(savedDevice);
        
        return savedDevice;
    };

    /**
     * Get a device by ID
     */
    @api
    permission[sys_admin | tenant_admin | customer_user] getDeviceById(id: Text) returns Optional<Device> | active {
        return devices.getOrNone(id);
    };

    /**
     * Delete a device
     */
    @api
    permission[sys_admin | tenant_admin] deleteDevice(id: Text) | active {
        var device = devices.getOrNone(id);
        require(device.isPresent(), "Device not found");
        
        // Remove device from storage
        devices = devices.without(id);
        deviceCredentials = deviceCredentials.without(id);
        customerAssignments = customerAssignments.without(id);
        
        // Emit notification
        notify deviceDeleted(id);
    };

    /**
     * Assign device to customer
     */
    @api
    permission[sys_admin | tenant_admin] assignDeviceToCustomer(deviceId: Text, customerId: Text) | active {
        require(deviceId.length() > 0, "Device ID cannot be empty");
        require(customerId.length() > 0, "Customer ID cannot be empty");
        
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        // Update device customer assignment
        var deviceObj = device.getOrFail();
        var updatedDevice = Device(
            id = deviceObj.id,
            name = deviceObj.name,
            type = deviceObj.type,
            tenantId = deviceObj.tenantId,
            customerId = optionalOf(customerId),
            credentials = deviceObj.credentials,
            label = deviceObj.label,
            deviceProfileId = deviceObj.deviceProfileId,
            firmwareId = deviceObj.firmwareId,
            softwareId = deviceObj.softwareId,
            externalId = deviceObj.externalId,
            version = deviceObj.version,
            additionalInfo = deviceObj.additionalInfo,
            createdTime = deviceObj.createdTime,
            deviceData = deviceObj.deviceData
        );
        
        devices = devices.with(deviceId, updatedDevice);
        customerAssignments = customerAssignments.with(deviceId, customerId);
        
        notify deviceAssigned(deviceId, customerId);
    };

    /**
     * Unassign device from customer
     */
    @api
    permission[sys_admin | tenant_admin] unassignDeviceFromCustomer(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var deviceObj = device.getOrFail();
        var updatedDevice = Device(
            id = deviceObj.id,
            name = deviceObj.name,
            type = deviceObj.type,
            tenantId = deviceObj.tenantId,
            customerId = optionalOf<Text>(),
            credentials = deviceObj.credentials,
            label = deviceObj.label,
            deviceProfileId = deviceObj.deviceProfileId,
            firmwareId = deviceObj.firmwareId,
            softwareId = deviceObj.softwareId,
            externalId = deviceObj.externalId,
            version = deviceObj.version,
            additionalInfo = deviceObj.additionalInfo,
            createdTime = deviceObj.createdTime,
            deviceData = deviceObj.deviceData
        );
        
        devices = devices.with(deviceId, updatedDevice);
        customerAssignments = customerAssignments.without(deviceId);
        
        notify deviceUnassigned(deviceId);
    };

    /**
     * Save device credentials
     */
    @api
    permission[sys_admin | tenant_admin] saveDeviceCredentials(deviceId: Text, credentials: DeviceCredentials) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        require(credentials.deviceId == deviceId, "Credentials device ID mismatch");
        require(credentials.credentialsType.length() > 0, "Credentials type cannot be empty");
        require(credentials.credentialsValue.length() > 0, "Credentials value cannot be empty");
        
        deviceCredentials = deviceCredentials.with(deviceId, credentials);
        
        var deviceObj = device.getOrFail();
        var updatedDevice = Device(
            id = deviceObj.id,
            name = deviceObj.name,
            type = deviceObj.type,
            tenantId = deviceObj.tenantId,
            customerId = deviceObj.customerId,
            credentials = credentials.credentialsValue,
            label = deviceObj.label,
            deviceProfileId = deviceObj.deviceProfileId,
            firmwareId = deviceObj.firmwareId,
            softwareId = deviceObj.softwareId,
            externalId = deviceObj.externalId,
            version = deviceObj.version,
            additionalInfo = deviceObj.additionalInfo,
            createdTime = deviceObj.createdTime,
            deviceData = deviceObj.deviceData
        );
        
        devices = devices.with(deviceId, updatedDevice);
        
        notify deviceCredentialsUpdated(deviceId, credentials.credentialsValue);
    };

    /**
     * Delete device credentials
     */
    @api
    permission[sys_admin | tenant_admin] deleteDeviceCredentials(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        deviceCredentials = deviceCredentials.without(deviceId);
        
        var deviceObj = device.getOrFail();
        var updatedDevice = Device(
            id = deviceObj.id,
            name = deviceObj.name,
            type = deviceObj.type,
            tenantId = deviceObj.tenantId,
            customerId = deviceObj.customerId,
            credentials = "",
            label = deviceObj.label,
            deviceProfileId = deviceObj.deviceProfileId,
            firmwareId = deviceObj.firmwareId,
            softwareId = deviceObj.softwareId,
            externalId = deviceObj.externalId,
            version = deviceObj.version,
            additionalInfo = deviceObj.additionalInfo,
            createdTime = deviceObj.createdTime,
            deviceData = deviceObj.deviceData
        );
        
        devices = devices.with(deviceId, updatedDevice);
        
        notify deviceCredentialsDeleted(deviceId);
    };

    /**
     * Claim device
     */
    @api
    permission[sys_admin | tenant_admin] claimDevice(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var claimedBy = "current_user";
        notify deviceClaimed(deviceId, claimedBy);
    };

    /**
     * Reclaim device
     */
    @api
    permission[sys_admin | tenant_admin] reclaimDevice(deviceId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        var reclaimedBy = "current_user";
        notify deviceReclaimed(deviceId, reclaimedBy);
    };

    /**
     * Process bulk device import
     */
    @api
    permission[sys_admin | tenant_admin] processDevicesBulkImport(deviceData: Text) returns BulkImportResult | active {
        require(deviceData.length() > 0, "Device data cannot be empty");
        
        var importedCount = 0;
        var failedCount = 0;
        var errors = listOf<Text>();
        var totalProcessed = 1;
        
        if (deviceData.length() > 10) {
            importedCount = 1;
        } else {
            failedCount = 1;
            errors = errors.with("Invalid device data format");
        };
        
        notify devicesBulkImported(importedCount, failedCount);
        
        return BulkImportResult(
            totalProcessed = totalProcessed,
            successCount = importedCount,
            failedCount = failedCount,
            errors = errors
        );
    };

    /**
     * Process bulk device deletion
     */
    @api
    permission[sys_admin | tenant_admin] processDevicesBulkDelete(deviceIds: List<Text>) returns BulkImportResult | active {
        require(!deviceIds.isEmpty(), "Device IDs list cannot be empty");
        
        var deletedCount = 0;
        var failedCount = 0;
        var errors = listOf<Text>();
        
        for (deviceId in deviceIds) {
            var device = devices.getOrNone(deviceId);
            
            if (!device.isPresent()) {
                failedCount = failedCount + 1;
                errors = errors.with("Device not found: " + deviceId);
            } else {
                devices = devices.without(deviceId);
                deviceCredentials = deviceCredentials.without(deviceId);
                customerAssignments = customerAssignments.without(deviceId);
                
                deletedCount = deletedCount + 1;
                notify deviceDeleted(deviceId);
            };
        };
        
        notify devicesBulkDeleted(deletedCount, failedCount);
        
        return BulkImportResult(
            totalProcessed = deviceIds.size(),
            successCount = deletedCount,
            failedCount = failedCount,
            errors = errors
        );
    };

    /**
     * Assign device to edge
     */
    @api
    permission[sys_admin | tenant_admin] assignDeviceToEdge(deviceId: Text, edgeId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        require(edgeId.length() > 0, "Edge ID cannot be empty");
        
        notify deviceAssignedToEdge(deviceId, edgeId);
    };

    /**
     * Unassign device from edge
     */
    @api
    permission[sys_admin | tenant_admin] unassignDeviceFromEdge(deviceId: Text, edgeId: Text) | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        notify deviceUnassignedFromEdge(deviceId, edgeId);
    };

    /**
     * Get device credentials
     */
    @api
    permission[sys_admin | tenant_admin] getDeviceCredentials(deviceId: Text) returns Optional<DeviceCredentials> | active {
        var device = devices.getOrNone(deviceId);
        require(device.isPresent(), "Device not found");
        
        return deviceCredentials.getOrNone(deviceId);
    };

    /**
     * Get all devices
     */
    @api
    permission[sys_admin | tenant_admin | customer_user] getAllDevices() returns List<Device> | active {
        return devices.values();
    };

}; 